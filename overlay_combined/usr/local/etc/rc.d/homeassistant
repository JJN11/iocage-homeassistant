#!/bin/sh
#
# PROVIDE: homeassistant
# REQUIRE: LOGIN
# KEYWORD: shutdown
#
# homeassistant_enable: Set to YES to enable the homeassistant service.
#       Default: NO
#
# homeassistant_user: The user account used to run the homeassistant daemon.
#       This is optional, however do not specifically set this to an
#       empty string as this will cause the daemon to run as root.
#       Default:  homeassistant
#       Change:   `sysrc homeassistant_user=hass`
#       UnChange: `sysrc -x homeassistant_user`
#
# homeassistant_group: The group account used to run the homeassistant daemon.
#       This is optional, however do not specifically set this to an
#       empty string as this will cause the daemon to run with group wheel.
#       Default:  homeassistant
#       Change:   `sysrc homeassistant_group=hass`
#       UnChange: `sysrc -x homeassistant_group`
#
# homeassistant_user_dir: Directory where the homeassistant users files can be located.
#       Default:  "${HOME}"
#       Change:   `sysrc homeassistant_user_dir="/home/hass"`
#       UnChange: `sysrc -x homeassistant_user_dir`
#
# homeassistant_config_dir: Directory where the homeassistant `configuration.yaml` is located.
#       Default:  "/home/homeassistant/.homeassistant"
#       Change:   `sysrc homeassistant_config_dir="/home/hass/homeassistant"`
#       UnChange: `sysrc -x homeassistant_config_dir`
#
# homeassistant_venv: Directory where the homeassistant virtualenv is located.
#       Default:  "/usr/local/srv/homeassistant"
#       Change:   `sysrc homeassistant_venv="/srv/homeassistant"`
#       UnChange: `sysrc -x homeassistant_venv`

# -------------------------------------------------------
# Copy this file to '/usr/local/etc/rc.d/homeassistant' 
# `chmod +x /usr/local/etc/rc.d/homeassistant`
# `sysrc -f /etc/rc.conf homeassistant_enable=yes`
# `service homeassistant start`
# -------------------------------------------------------

. /etc/rc.subr
name=homeassistant
rcvar=${name}_enable

logfile="/var/log/${name}_daemon.log"
pidfile="/var/run/${name}_daemon.pid"
pidfile_child="/var/run/${name}.pid"


: ${homeassistant_enable:="NO"}
: ${homeassistant_user:="homeassistant"}
: ${homeassistant_group:="homeassistant"}
: ${homeassistant_python:="/usr/local/bin/python3.7"}
: ${homeassistant_venv:="/usr/local/srv/homeassistant"}

HOME=`eval echo "~${homeassistant_user}"`

: ${ha_backup_dir:="${HOME}/.homeassistant_backups"}
: ${ha_config_dir:="${HOME}/.homeassistant"}

PATH=/usr/local/sbin:/usr/local/bin:${PATH}

export CFLAGS=-I/usr/local/include
export LIBRARY_PATH=-L/usr/local/lib

command="/usr/sbin/daemon"
extra_commands="config check_config install logs restart reinstall test upgrade"

# if [ -d ${homeassistant_extra_commands:="/usr/local/etc/rc.d/extra_commands"} ]; then
#   #echo "Loading extra_commands from "${homeassistant_extra_commands}"
#   for _file_ in `find "${homeassistant_extra_commands}" -type f -print | sort`; do . "${_file_}"; done
# fi


start_precmd=${name}_precmd
homeassistant_precmd() {
  
  HA_CONFIG_DIR="${ha_config_dir}"
  HA_LOG_FILE="${ha_log_file}"
  HA_LOG_ROTATE_DAYS="${ha_log_rotate_days}"
  
  if [ ! -d "${HA_CONFIG_DIR}" ]; then
    install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${HA_CONFIG_DIR}" || exit
  fi
  
  HA_ARGS=""
  HA_ARGS=" --config ${HA_CONFIG_DIR}"
  
  if [ ! -z "${HA_LOG_FILE}" ]; then
    install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${HA_LOG_FILE}" || exit
    HA_ARGS="${HA_ARGS} --log-file ${HA_LOG_FILE}"
  fi
  
  if [ ! -z "${HA_LOG_ROTATE_DAYS}" ]; then
    HA_ARGS="${HA_ARGS} --log-rotate-days ${HA_LOG_ROTATE_DAYS}"
  fi
  
  install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${logfile}" || exit
  install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${pidfile}" || exit
  install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${pidfile_child}" || exit
  
  rc_flags="-f -o ${logfile} -P ${pidfile} -p ${pidfile_child} ${homeassistant_venv}/bin/hass ${HA_ARGS}" ${rc_flags}
  
}

start_postcmd=${name}_poststart
homeassistant_poststart() {
  sleep 1
  run_rc_command status \
  && echo " ip address `ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'`"
}

stop_postcmd=${name}_poststop
homeassistant_poststop() {
  rm -f -- "${pidfile}"
  rm -f -- "${pidfile_child}"
}

check_config_cmd="${name}_check_config $@"
homeassistant_check_config() {
  local cfg="${2}"
  HA_CONFIG_DIR="${cfg:=$ha_config_dir}"
  su ${homeassistant_user} -c '
    source ${1}/bin/activate || exit 1
    hass --config ${2} --script check_config
    deactivate
  ' _ ${homeassistant_venv} ${HA_CONFIG_DIR}
}

install_cmd="${name}_install ${@}"
homeassistant_install() {
  
  if [ ${2} == hacs ]; then
    [ -d "${HA_CONFIG_DIR}/custom_components/hacs" ] && { echo "${red}HACS is already installed${end}"; exit; }
    pkg install -y wget zip || exit
    su ${homeassistant_user} -c '
      wget -O /var/tmp/hacs.zip https://github.com/hacs/integration/releases/latest/download/hacs.zip \
      && unzip -d ${1}/custom_components/hacs /var/tmp/hacs.zip
    ' _ ${HA_CONFIG_DIR} || exit 1
    echo -e "\n${red} !! RESTART HOME ASSISTANT BEFORE THE NEXT STEP !!"
    echo -e "${grn}     https://hacs.xyz/docs/configuration/start${end}\n"
    exit 0
  fi
  
  [ ! -z ${2} ] && local version="${2}"
  
  if [ ! -d ${homeassistant_venv} ]; then
    echo -e "\nCreating virtualenv: ${homeassistant_venv}"
    install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- ${homeassistant_venv} || exit 1
    su ${homeassistant_user} -c '
      ${1} -m venv ${2}
      source ${2}/bin/activate || exit 3
        pip install --upgrade pip wheel SQLAlchemy colorlog
      deactivate
    ' _ ${homeassistant_python} ${homeassistant_venv} ${version}
  else
    echo -e "\nFound existing virtualenv: ${homeassistant_venv}"
    run_rc_command stop  #>/dev/null 2>&1
  fi
  
  su ${homeassistant_user} -c '
    source ${2}/bin/activate || exit 3
      if [ ! -z ${3} ]; then
        echo -e "\nInstalling Home Assistant Core version: ${3}\n"
        pip install --upgrade homeassistant=="${3}" || exit 2
      else
        echo -e "\nInstalling Home Assistant Core\n"
        pip install --upgrade homeassistant || exit 2
      fi
    deactivate
  ' _ ${homeassistant_python} ${homeassistant_venv} ${version}
  [ ${?} == 0 ] && run_rc_command start
  
}

logs_cmd="${name}_logs $@"
homeassistant_logs() {
  case ${2} in
    -f )
      tail -F "${logfile}"
    ;;
    -n | -t )
      local num=${3}
      tail -n ${num:="100"} "${logfile}"
    ;;
    -m )
      more "${logfile}"
    ;;
    * )
      cat "${logfile}"
    ;;
  esac
}

reinstall_cmd="${name}_reinstall ${@}"
homeassistant_reinstall() {
  run_rc_command stop  #>/dev/null 2>&1

  [ ! -z ${2} ] && local version="${2}" \
  || local version=`${homeassistant_venv}/bin/hass --version` >/dev/null 2>&1
  
  [ -d ${HOME}/.cache ] && rm -rf -- ${HOME}/.cache
  [ -d ${homeassistant_venv} ] && rm -rf -- ${homeassistant_venv}
  
  run_rc_command install ${version}
}

restart_cmd="${name}_restart"
homeassistant_restart() {
  run_rc_command check_config || exit 1
  run_rc_command stop  #>/dev/null 2>&1
  run_rc_command start #>/dev/null 2>&1
}

upgrade_cmd="${name}_upgrade"
homeassistant_upgrade() {
  run_rc_command stop
  su ${homeassistant_user} -c '
    source ${1}/bin/activate || exit 1
    pip install --upgrade homeassistant
    deactivate
  ' _ ${homeassistant_venv} || exit 1
  [ $? == 0 ] && run_rc_command check_config && run_rc_command start
}

config_cmd="${name}_config $@"
homeassistant_config() {
  
  usage() {
    cat <<-_HELP_
	  
	  Usage: Do stuff with the configuration
	    
	  export TODO = Add more useful information to help
	    
	    -b  | --backup ) Create a zip backup of the configuration folder
	    -c  | --check  ) Run a config check
	    -cp | --copy   ) Copy configuration to another directory
	    
	_HELP_
    exit
  }
  
  local dir="${3}"
  [ ! -z "${dir}" ] || usage
  #while [ "$1" != "" ]; do
    case $2 in
    
      -b | --backup )
          local conf_dir="${dir:=$ha_config_dir}"
          if [ ! -d ${conf_dir} ]; then
            echo "${red} ${conf_dir} is not a directory or does not exist${end}" && exit
          elif [ ! -d ${HA_BACKUP_DIR} ]; then
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${HA_BACKUP_DIR}" || exit
          fi
          su ${homeassistant_user} -c '
            echo -e "\n${orn}Creating backup.zip. This can take a few minutes to complete...\n${end}"
            _now=$(date +%F_%T)
            _v=$(cat ${1}/.HA_VERSION >/dev/null 2>&1)
            _ver=${_v:="NA"}
            backup="ha_${_ver}_${_now}.zip"
            echo "HA_CONFIG_DIR: ${1}"
            echo "HA_BACKUP_DIR: ${2}"
            echo "HA_BACKUP_ZIP: ${backup}"
            zip -9 -q -r "${2}/${backup}" "${1}" -x"*/components/*" -x"*/deps/*" -x"*/home-assistant.log" -x"*/.cache/*" -x"*/__pycache__*/"
          ' _ ${conf_dir} ${HA_BACKUP_DIR}
          echo -e "\n${grn} Created backup in ${HA_BACKUP_DIR}/${end}"
          ;;
          
      -c | --check )
          local conf_dir="${dir:=$ha_config_dir}"
          su ${homeassistant_user} -c '
            source ${1}/bin/activate || exit 1
            hass --config ${2} --script check_config
            deactivate
          ' _ ${homeassistant_venv} ${conf_dir}
          ;;
          
      -cp | --copy )
          shift
          [ ! -z "${dir}" ] || { echo "Please provide a /second/directory/path"; exit; }
          ## One folder must be empty! Copy config to the empty folder.
          if [ ! -d "${dir}" ] || [ ! "$(ls -A ${dir})" ]; then
            local config_from="${ha_config_dir}"
            local config_to="${dir}"
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${config_to}" || exit
          elif [ ! -d "${ha_config_dir}" ] || [ ! "$(ls -A ${ha_config_dir})" ]; then
            local config_to="${ha_config_dir}"
            local config_from="${dir}"
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${config_to}" || exit
          else
            echo "Destination must be an empty directory" && exit
          fi
          su ${homeassistant_user} -c '
            echo "cp -R s: ${1}/ > d: ${2}/"
          ' _ ${config_from} ${config_to}
          ;;
          
      -h | --help )
          usage
          ;;
          
      * )
        echo -e "\n Operation not supported: $@"
        usage
        ;;
    esac
  #shift
  #done
}


test_cmd="${name}_test"
homeassistant_test() {
  
  echo
  echo "USER: `whoami`"
  echo "HOME: $HOME"
  echo "PATH: $PATH"
  
  echo -e "\nChecking Service\n"
  
  ## Check for venv directory
  [ ! -d "${homeassistant_venv}" ] \
  && { echo -e " NO DIRECTORY: ${homeassistant_venv}\n"; exit; }
  
  ## Check for activate script
  [ ! -f "${homeassistant_venv}/bin/activate" ] \
  && { echo -e " NO FILE: ${homeassistant_venv}/bin/activate\n"; exit; }
  
  echo "Switching users..."
  ## Switch users / activate virtualenv / run a command
  su "${homeassistant_user}" -c '
    
    echo -e " OK\n"
    #[ -f ${HOME}/.ha_profile ] && source ${HOME}/.ha_profile
    
    echo " USER: `whoami`"
    echo " HOME: $HOME"
    echo " PATH: $PATH"
    echo
    echo " Using $(openssl version)"
    echo " CFLAGS = ${CFLAGS}"
    echo " LIBRARY_PATH = ${LIBRARY_PATH}"
    echo
    
    source ${1}/bin/activate || exit 20
    ## Check versions of python and homeassistant
    echo " $(python --version)" || exit 21
    echo " Home Assistant $(pip show homeassistant | grep Version | cut -d" " -f2)" || exit 22
    echo
    deactivate
  ' _ ${homeassistant_venv} || { echo ${?}; exit; }
  [ $? != 0 ] && echo "exit ${?}"
}


colors () {         #  <-- enable some
  red=$'\e[1;31m'
  grn=$'\e[1;32m'
  yel=$'\e[1;33m'
  bl1=$'\e[1;34m'
  mag=$'\e[1;35m'
  cyn=$'\e[1;36m'
  blu=$'\e[38;5;39m'
  orn=$'\e[38;5;208m'
  end=$'\e[0m'
}
colors

load_rc_config ${name}
run_rc_command "$1"
