#!/bin/sh
#
# PROVIDE: homeassistant
# REQUIRE: LOGIN
# KEYWORD: shutdown
#
# homeassistant_enable: Set to YES to enable the homeassistant service.
#		Default: NO
# homeassistant_user: The user account used to run the homeassistant daemon.
#		This is optional, however do not specifically set this to an
#		empty string as this will cause the daemon to run as root.
#		Default: hass
# homeassistant_group: The group account used to run the homeassistant daemon.
#		This is optional, however do not specifically set this to an
#		empty string as this will cause the daemon to run with group wheel.
#		Default: hass
#
# homeassistant_venv: Directory where homeassistant virtualenv is located.
#       Default:  "/usr/local/share/homeassistant"
#       Change:   `sysrc homeassistant_venv="/srv/homeassistant"`
#       UnChange: `sysrc -x homeassistant_venv`
#
# homeassistant_config_dir: Directory where homeassistant config is located.
#       Default:  "/home/homeassistant/.homeassistant"
#       Change:   `sysrc homeassistant_config_dir="/home/hass/homeassistant"`
#       UnChange: `sysrc -x homeassistant_config_dir`

# -------------------------------------------------------
# Copy this file to '/usr/local/etc/rc.d/homeassistant' 
# `chmod +x /usr/local/etc/rc.d/homeassistant`
# `sysrc homeassistant_enable=yes`
# `service homeassistant start`
# -------------------------------------------------------

. /etc/rc.subr
name=homeassistant
rcvar=${name}_enable

pidfile_child="/var/run/${name}.pid"
pidfile="/var/run/${name}_daemon.pid"
logfile="/var/log/${name}_daemon.log"

: ${homeassistant_enable:="NO"}
: ${homeassistant_user:="hass"}
: ${homeassistant_group:="hass"}
: ${homeassistant_config_dir:="/home/hass/homeassistant"}
: ${homeassistant_venv:="/srv/homeassistant"}

export PATH=/usr/local/sbin:/usr/local/bin:${PATH}

_ssl_from=`sysrc -n homeassistant_openssl 2>/dev/null`
[ ${_ssl_from:="base"} == "package" ] \
&& { export CPATH=/usr/local/include; export LIBRARY_PATH=/usr/local/lib; }

command="/usr/sbin/daemon"
extra_commands="check_config reinstall restart test upgrade"

start_precmd=${name}_precmd
homeassistant_precmd() {
    rc_flags="-f -o ${logfile} -P ${pidfile} -p ${pidfile_child} ${homeassistant_venv}/bin/hass --config ${homeassistant_config_dir} ${rc_flags}"
    [ ! -e "${pidfile_child}" ] && install -g ${homeassistant_group} -o ${homeassistant_user} -- /dev/null "${pidfile_child}"
    [ ! -e "${pidfile}" ] && install -g ${homeassistant_group} -o ${homeassistant_user} -- /dev/null "${pidfile}"
    [ -e "${logfile}" ] && rm -f -- "${logfile}"
    install -g ${homeassistant_group} -o ${homeassistant_user} -- /dev/null "${logfile}"
    if [ ! -d "${homeassistant_config_dir}" ]; then
      install -d -g ${homeassistant_group} -o ${homeassistant_user} -m 775 -- "${homeassistant_config_dir}"
    fi
}

start_postcmd=${name}_poststart
homeassistant_poststart() {
  echo; sleep 1
  run_rc_command status
}

stop_postcmd=${name}_poststop
homeassistant_poststop() {
    rm -f -- "${pidfile}"
    rm -f -- "${pidfile_child}"
}

upgrade_cmd="${name}_upgrade"
homeassistant_upgrade() {
    run_rc_command stop
    su ${homeassistant_user} -c '
      source ${@}/bin/activate || exit 1
      pip3 install --upgrade homeassistant
      deactivate
    ' _ ${homeassistant_venv} || exit 1
    [ $? == 0 ] && run_rc_command check_config && run_rc_command start
}

check_config_cmd="${name}_check_config"
homeassistant_check_config() {
    local config="${homeassistant_config_dir}/configuration.yaml"
    [ ! -e "${config}" ] && { echo "Not Found: ${config}"; exit 1; }
    su ${homeassistant_user} -c '
      source ${1}/bin/activate || exit 1
      hass --config ${2} --script check_config
      deactivate
    ' _ ${homeassistant_venv} ${homeassistant_config_dir}
}

reinstall_cmd="${name}_reinstall ${@}"
homeassistant_reinstall() {
    run_rc_command stop
    su ${homeassistant_user} -c '
      [ -d ${HOME}/.cache ] && rm -rf -- ${HOME}/.cache
      source ${1}/bin/activate || exit 3
        ## Try to get currently installed version
        _ver=$(pip show homeassistant | grep Version | cut -d" " -f2)
        ## If version is not set, default to "upgrade"
        [ ! -z ${_ver} ] || _ver=upgrade
        ## If provided, set a version from the argument
        [ ! -z ${2} ] && _ver="${2}"
        ## Reinstall Home Assistant Core
        if [ "${_ver}" == "upgrade" ]; then
          echo -e "\nReinstalling with latest version\n"
          pip install --force-reinstall homeassistant || exit 2
        else
          echo -e "\nReinstalling with version: ${_ver}\n"
          pip install --force-reinstall homeassistant=="${_ver}" || exit 2
        fi
      deactivate
    ' _ ${homeassistant_venv} ${2} || exit ${?}
    [ ${?} == 0 ] && run_rc_command check_config && run_rc_command start
}

restart_cmd="${name}_restart"
homeassistant_restart() {
    run_rc_command check_config || exit 1
    run_rc_command stop  # >/dev/null 2>&1
    run_rc_command start # >/dev/null 2>&1
}

test_cmd="${name}_test"
homeassistant_test() {
    echo -e "\nChecking Service\n"
    ## Check for venv directory
    [ ! -d "${homeassistant_venv}" ] \
    && { echo -e " NO DIRECTORY: ${homeassistant_venv}\n"; exit; }
    ## Check for activate script
    [ ! -f "${homeassistant_venv}/bin/activate" ] \
    && { echo -e " NO FILE: ${homeassistant_venv}/bin/activate\n"; exit; }
    ## Switch users / activate virtualenv / run a command
    su "${homeassistant_user}" -c '
      #[ -f ${HOME}/.profile ] && source ${HOME}/.profile
      source ${1}/bin/activate || exit 20
      ## Some checks for openssl111
      echo " Using $(openssl version)"
      echo " CPATH = ${CPATH}"
      echo -e " LIBRARY_PATH = ${LIBRARY_PATH}\n"
      ## Check versions of python and homeassistant
      echo " $(python --version)" || exit 21
      echo " Home Assistant $(pip show homeassistant | grep Version | cut -d" " -f2)" || exit 22
      echo
      deactivate
    ' _ ${homeassistant_venv} || { echo ${?}; exit; }
     [ $? != 0 ] && echo "exit ${?}"
}

load_rc_config ${name}
run_rc_command "$1"
