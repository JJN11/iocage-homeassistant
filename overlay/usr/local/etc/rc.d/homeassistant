#!/bin/sh
#
# PROVIDE: homeassistant
# REQUIRE: LOGIN
# KEYWORD: shutdown
#
# homeassistant_enable: Set to YES to enable the homeassistant service.
#       Default: NO
#
# homeassistant_user: The user account used to run the homeassistant daemon.
#       This is optional, however do not specifically set this to an
#       empty string as this will cause the daemon to run as root.
#       Default:  homeassistant
#       Change:   `sysrc homeassistant_user="hass"`
#       UnChange: `sysrc -x homeassistant_user`
#
# homeassistant_group: The group account used to run the homeassistant daemon.
#       Default:  $_HOMEASSISTANT_USER_PRIMARY_GROUP_
#       Change:   `sysrc homeassistant_group="hass"`
#       UnChange: `sysrc -x homeassistant_group`
#
# homeassistant_user_dir: Directory where the homeassistant users files can be located.
#       Default:  "${HOME}"
#       Change:   `sysrc homeassistant_user_dir="/path/to/directory"`
#       UnChange: `sysrc -x homeassistant_user_dir`
#
# homeassistant_venv: Directory where the homeassistant virtualenv is located.
#       Default:  "/usr/local/srv/homeassistant"
#       Change:   `sysrc homeassistant_venv="/srv/homeassistant"`
#       UnChange: `sysrc -x homeassistant_venv`
#
# homeassistant_config_dir: Directory where the homeassistant `configuration.yaml` is located.
#       Default:  "/home/homeassistant/.homeassistant"
#       Change:   `sysrc homeassistant_config_dir="/home/hass/homeassistant"`
#       UnChange: `sysrc -x homeassistant_config_dir`
#
# homeassistant_backup_dir: Directory where the homeassistant `configuration.yaml` is located.
#       Default:  "/home/homeassistant/.homeassistant_backups"
#       Change:   `sysrc homeassistant_backup_dir="/home/hass/backups"`
#       UnChange: `sysrc -x homeassistant_backup_dir`
#

# -------------------------------------------------------
# Copy this file to '/usr/local/etc/rc.d/homeassistant' 
# `chmod +x /usr/local/etc/rc.d/homeassistant`
# `sysrc -f /etc/rc.conf homeassistant_enable=yes`
# `service homeassistant start`
# -------------------------------------------------------

. /etc/rc.subr
name=homeassistant
rcvar=${name}_enable

logfile="/var/log/${name}_daemon.log"
pidfile="/var/run/${name}_daemon.pid"
pidfile_child="/var/run/${name}.pid"

: ${homeassistant_enable:="NO"}
: ${homeassistant_python:="/usr/local/bin/python3.8"}
: ${homeassistant_venv:="/usr/local/srv/homeassistant"}
: ${homeassistant_user:="homeassistant"}

load_rc_config ${name}

PATH=/usr/local/sbin:/usr/local/bin:${PATH}
HOME=`eval echo "~${homeassistant_user}"`

: ${homeassistant_backup_dir:="${HOME}/.homeassistant_backups"}
: ${homeassistant_config_dir:="${HOME}/.homeassistant"}

#export CPATH=/usr/local/include
#export LIBRARY_PATH=/usr/local/lib
export TERM=xterm-256color

umask 2

if [ -z ${homeassistant_group:=`sysrc -n homeassistant_group 2>/dev/null`} ]; then
  homeassistant_group=`id -gn ${homeassistant_user}`
fi

command="/usr/sbin/daemon"
extra_commands="check_config config install logs reinstall restart test upgrade"

start_precmd=${name}_precmd
homeassistant_precmd() {
  
  if [ ! -x ${HA:="${homeassistant_venv}/bin/hass"} ]; then
    echo -e "${red} ${HA}${end} is not found or is not executable" && exit
  elif [ `stat -f '%Su' ${HA}` != ${homeassistant_user} ]; then
    chown -R "${homeassistant_user}":"${homeassistant_group}" "${homeassistant_venv}" \
    || { echo -e "${red} Refusing to start. Unable to set permissions${end}"
         echo -e "${orn} ${HA}${end} is not owned by${orn} ${homeassistant_user}${end}"; exit; }
  fi
  if [ ! -d "${homeassistant_config_dir}" ]; then
    install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${homeassistant_config_dir}" || exit
  fi
  
  HA_ARGS=""
  HA_ARGS=" --config ${homeassistant_config_dir}"
  
  if [ ! -z "${homeassistant_log_file}" ]; then
    install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${homeassistant_log_file}" || exit
    HA_ARGS="${HA_ARGS} --log-file ${homeassistant_log_file}"
  fi
  
  if [ ! -z "${homeassistant_log_rotate_days}" ]; then
    HA_ARGS="${HA_ARGS} --log-rotate-days ${homeassistant_log_rotate_days}"
  fi
  
  install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${logfile}" || exit
  install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${pidfile}" || exit
  install -g ${homeassistant_group} -m 664 -o ${homeassistant_user} -- /dev/null "${pidfile_child}" || exit
  
  rc_flags="-f -o ${logfile} -P ${pidfile} -p ${pidfile_child} ${HA} ${HA_ARGS}" ${rc_flags}
  
}

start_postcmd=${name}_poststart
homeassistant_poststart() {
  sleep 1
  run_rc_command status \
  && echo " `ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'`:8123"
}

stop_postcmd=${name}_poststop
homeassistant_poststop() {
  rm -f -- "${pidfile}"
  rm -f -- "${pidfile_child}"
}

check_config_cmd="${name}_check_config"
homeassistant_check_config() {
  run_rc_command config -c
}

config_cmd="${name}_config $@"
homeassistant_config() {
  
  usage() {
    echo -e "\n Config Directory: ${homeassistant_config_dir}"
    echo -e " Backup Directory: ${homeassistant_backup_dir}\n"
    cat <<-_HELP_
	  
	  Usage: Do stuff with the configuration
	    
	  export TODO = Add more useful information to help
	    
	    -b  | --backup   Create zip backup of a configuration directory.
	    -c  | --check    Run a config check.
	    -cp | --copy     Copy configuration to another directory.
	    -r  | --restore  Restore zip backup to a configuration directory.
	    
	_HELP_
    exit
  }
  
  local dir="${3}"
    case $2 in
      -b | --backup )
          local conf_dir="${dir:=$homeassistant_config_dir}"
          if [ ! -d ${conf_dir} ]; then
            { echo "${red} ${conf_dir} is not a directory or does not exist${end}"; exit; }
          elif [ ! -d ${homeassistant_backup_dir} ]; then
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${homeassistant_backup_dir}" || exit
          fi
          su ${homeassistant_user} -c '
            _now=$(date +%y%m%d.%H%M%S)
            _ver=$(cat ${1}/.HA_VERSION 2>/dev/null)
            backup="HA_${_ver:="0.0"}_${_now}.zip"
            
            grn="\e[1;32m"
            orn="\e[38;5;208m"
            red="\e[1;31m"
            end="\e[0m"
            
            echo -e "\n${orn}Creating Backup...\n${end}"
            echo    " Config Directory: ${1}"
            echo    " Backup Directory: ${2}"
            echo -e " Backup file: ${backup}\n"
            
            cd ${1}
            zip -9 -q -r "${2}/${backup}" . -x"*/components/*" -x"*/deps/*" -x"*/home-assistant.log" -x"*/.cache/*" -x"*/__pycache__*/" \
            && { echo -e "${orn}Testing Backup... ${end}"; unzip -t "${2}/${backup}" 1>/dev/null; } \
            || { echo -e "${red}Backup Failed"${end}; exit 1; }
            echo -e "${grn}Backup Created${end} ${2}/${backup}"
          ' _ ${conf_dir} ${homeassistant_backup_dir} || exit
          ;;
          
      -c | --check )
          local conf_dir="${dir:=$homeassistant_config_dir}"
          su ${homeassistant_user} -c '
            source ${1}/bin/activate || exit 1
            hass --config ${2} --script check_config
            deactivate
          ' _ ${homeassistant_venv} ${conf_dir}
          ;;
          
      -cp | --copy )
          [ ! -z "${dir}" ] || { echo "Please provide a /second/directory/path"; exit; }
          ## One folder must be empty! Copy config to the empty folder.
          if [ ! -d "${dir}" ] || [ ! "$(ls -A ${dir})" ]; then
            local config_from="${homeassistant_config_dir}"
            local config_to="${dir}"
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${config_to}" || exit
          elif [ ! -d "${homeassistant_config_dir}" ] || [ ! "$(ls -A ${homeassistant_config_dir})" ]; then
            local config_to="${homeassistant_config_dir}"
            local config_from="${dir}"
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${config_to}" || exit
          else
            echo "${orn}Destination must be an empty directory${end}" && exit
          fi
          su ${homeassistant_user} -c '
            cp -R ${1}/ ${2}/
          ' _ ${config_from} ${config_to}
          ;;
          
      -h | --help )
          usage
          ;;
        
      -r | --restore )
          local _create_="false"
          local conf_dir="${dir:=$homeassistant_config_dir}"
          if [ ! -d ${homeassistant_backup_dir} ] || [ ! "$(ls -A ${homeassistant_backup_dir} | grep .zip)" ]; then
            echo -e "${orn} No Backups Found:${end} ${homeassistant_backup_dir}\n"
            exit 1
          elif [ -d ${conf_dir} ] && [ "$(ls -A ${conf_dir})" ]; then
            echo -e "${orn}\n Directory is not empty${end} ${conf_dir}"
            echo -e "${orn} This operation will REPLACE existing files${end}\n"
          elif [ ! -d ${conf_dir} ] || [ ! "$(ls -A ${conf_dir})" ];then
            install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${conf_dir}" \
            || { echo -e "${red} Unable to create ${conf_dir}${end}"; exit; }
            local _create_="true"
            echo -e "${grn}\n Backup will be restored to ${conf_dir}${end}\n"
          fi
          su ${homeassistant_user} -c '
            grn="\e[1;32m"
            orn="\e[38;5;208m"
            red="\e[1;31m"
            end="\e[0m"
            
            cancel() {
              exit 99
            }
            trap cancel 2 3 6
            
            backups=$(ls -r "${1}" | grep .zip)
            PS3=$(echo -e "\n C to Cancel\n Select: ")
            select zip in ${backups}
              do
                if [ "$REPLY" == c ] || [ "$REPLY" == C ]; then
                  cancel
                elif [ -z "${zip}" ]; then
                  echo -e "${red} $REPLY ${end}is not a valid number"
                  continue
                fi
                unzip -o -d "${2}" "${1}/${zip}" \
                && echo -e "${grn} Configuration restored${end}\n"
                exit 0
              done
          ' _ ${homeassistant_backup_dir} ${conf_dir}
          if [ $? == "99" ] && [ "${_create_}" == "true" ]; then
            [ ! "$(ls -A ${conf_dir})" ] \
            && { echo "Cleaning up..."; rmdir "${conf_dir}"; }
          fi
          ;;
      * )
        usage
        ;;
    esac
}


install_cmd="${name}_install ${@}"
homeassistant_install() {
  
  if [ "${2}" == "hacs" ]; then
    [ -d "${homeassistant_config_dir}/custom_components/hacs" ] && { echo "${red}HACS is already installed${end}"; exit; }
    #pkg install -y wget zip || exit
    su ${homeassistant_user} -c '
      wget -O /var/tmp/hacs.zip https://github.com/hacs/integration/releases/latest/download/hacs.zip \
      && unzip -d ${1}/custom_components/hacs /var/tmp/hacs.zip
    ' _ ${homeassistant_config_dir} || exit 1
    echo -e "\n${red} !! RESTART HOME ASSISTANT BEFORE THE NEXT STEP !!"
    echo -e "${grn}     https://hacs.xyz/docs/configuration/start${end}\n"
    exit 0
  elif [ ! -z ${2} ]; then
    local version="${2}"
  fi
  
  if [ ! -d "${homeassistant_config_dir}" ]; then
    install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- "${homeassistant_config_dir}" || exit
  fi
  
  if [ ! -d ${homeassistant_venv} ]; then
    echo -e "\nCreating virtualenv: ${homeassistant_venv}"
    install -d -g ${homeassistant_group} -m 775 -o ${homeassistant_user} -- ${homeassistant_venv} || exit 1
    su ${homeassistant_user} -c '
      ${1} -m venv ${2}
    ' _ ${homeassistant_python} ${homeassistant_venv}
  else
    echo -e "\nFound existing virtualenv: ${homeassistant_venv}"
    run_rc_command stop 2>/dev/null
  fi
  
  su ${homeassistant_user} -c '
    source ${2}/bin/activate || exit 3
      pip install --upgrade pip wheel colorlog
      if [ ! -z ${4} ]; then
        echo -e "\nInstalling Home Assistant Core version: ${4}\n"
        pip install --upgrade homeassistant=="${4}" || exit 2
      else
        echo -e "\nInstalling Home Assistant Core\n"
        pip install --upgrade homeassistant || exit 2
      fi
      # https://github.com/home-assistant/core/issues/36651
      hass --config ${3} --script ensure_config
      cat /dev/null > ${3}/home-assistant.log
      hass --config ${3} --script check_config || exit 2
    deactivate
  ' _ ${homeassistant_python} ${homeassistant_venv} ${homeassistant_config_dir} ${version}
  [ ${?} == 0 ] && run_rc_command start
  
}

logs_cmd="${name}_logs $@"
homeassistant_logs() {
  local num=${3}
  case ${2} in
    -f )
      tail -F "${logfile}"
    ;;
    -h )
      head -n ${num:="100"} "${logfile}"
    ;;
    -n | -t )
      tail -n ${num:="100"} "${logfile}"
    ;;
    -l )
      less -R "${logfile}"
    ;;
    * )
      cat "${logfile}"
    ;;
  esac
}

reinstall_cmd="${name}_reinstall ${@}"
homeassistant_reinstall() {
  local ver="${2}"
  run_rc_command stop 2>/dev/null
  
  if [ ! -z ${ver} ]; then
    local version="${ver}"
  elif [ ! -z ${ver:=`cat ${homeassistant_config_dir}/.HA_VERSION 2>/dev/null`} ];then
    local version="${ver}"
  elif [ ! -z ${ver:=`${homeassistant_venv}/bin/hass --version 2>/dev/null`} ]; then
    local version="${ver}"
  fi
  
  [ -d ${HOME}/.cache ] && rm -rf -- ${HOME}/.cache
  [ -d ${homeassistant_venv} ] && rm -rf -- ${homeassistant_venv}
  run_rc_command install ${version}
}

restart_cmd="${name}_restart"
homeassistant_restart() {
  run_rc_command config -c || exit 1
  run_rc_command stop 2>/dev/null
  run_rc_command start
}


test_cmd="${name}_test"
homeassistant_test() {
  
  echo
  echo "USER: `whoami`"
  echo "HOME: $HOME"
  echo "PATH: $PATH"
  
  echo -e "\nChecking Service\n"
  echo -e "  User: ${homeassistant_user}"
  echo -e " Group: ${homeassistant_group}\n"

  ## Check for venv directory
  [ ! -d "${homeassistant_venv}" ] \
  && { echo -e " NO DIRECTORY: ${homeassistant_venv}\n"; exit; }
  
  ## Check for activate script
  [ ! -f "${homeassistant_venv}/bin/activate" ] \
  && { echo -e " NO FILE: ${homeassistant_venv}/bin/activate\n"; exit; }
  
  echo "Switching users..."
  ## Switch users / activate virtualenv / run a command
  su "${homeassistant_user}" -c '
    
    echo -e " OK\n"
    #[ -f ${HOME}/.ha_profile ] && source ${HOME}/.ha_profile
    
    echo " USER: `whoami`"
    echo " HOME: $HOME"
    echo " PATH: $PATH"
    echo
    echo " Using $(openssl version)"
    echo " CPATH = ${CPATH}"
    echo " LIBRARY_PATH = ${LIBRARY_PATH}"
    echo
    
    source ${1}/bin/activate || exit 20
    ## Check versions of python and homeassistant
    echo " $(python --version)" || exit 21
    echo " Home Assistant $(pip show homeassistant | grep Version | cut -d" " -f2)" || exit 22
    echo
    deactivate
  ' _ ${homeassistant_venv} || { echo ${?}; exit; }
  [ $? != 0 ] && echo "exit ${?}"
}


upgrade_cmd="${name}_upgrade"
homeassistant_upgrade() {
  run_rc_command stop 2>/dev/null
  su ${homeassistant_user} -c '
    source ${1}/bin/activate || exit 1
    pip install --upgrade homeassistant
    deactivate
  ' _ ${homeassistant_venv} || exit 1
  [ $? == 0 ] && run_rc_command config --check && run_rc_command start
}


colors () {         #  <-- enable some
  red=$'\e[1;31m'
  grn=$'\e[1;32m'
  yel=$'\e[1;33m'
  bl1=$'\e[1;34m'
  mag=$'\e[1;35m'
  cyn=$'\e[1;36m'
  blu=$'\e[38;5;39m'
  orn=$'\e[38;5;208m'
  end=$'\e[0m'
}
colors

run_rc_command "$1"
